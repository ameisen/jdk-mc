We really need global defines for these:
	LogEvents

EliminateAllocationArraySizeLimit
  We have increased this from 64 to 4096. This also likely has the effect of causing bytecode sizes to inflate dramatically, which impacts things such as inlining.

build-performance.m4 precompiled headers
  Make sure that it is using precompiled headers with MSVC.

Symbol* box_classes[]
  Minecraft types like position.
  Maybe add a Char cache? /Character$CharacterCache

Clamp
  Add a clamp method to counterpart min/max

Remove unnecessary temporary buffers
  In classes like CheckedInputStream, temporary local buffers are used to skip data. This can be resolved by adding methods to things such as the Checksum interface which do not have to write to a buffer. Add a 'skip' method to InputStream (or streams in general) as well.

Make sure temporary buffers are actually being made local
  Java can do fast allocation on small buffers. Our temporary buffers in the runtime are usually 512, 1024, 4Ki or 8Ki bytes.

DeflaterInputStream -> FilterInputStream -> InputStream
  Provide optimized single-byte read that doesn't perform an allocation.

All file streams
  Add a heuristic to determine if we should open it with sequential, random access, or default semantics by default? Perhaps force it to use memory mapping underneath?

ENABLE_LINKTIME_GC

jlink - add better compression?

the JDK seems to include its own version of ow2.asm. Reconcile this with our version in support.base. jdk.internal.org.objectweb.asm
  Solution is probably to get rid of the internal module altogether, and remap all uses to the support.base one which uses the default namespace as it
  entirely overrides ow2.asm.

 $ZIPEXE
 $GZIP => -9

 (cd "$DEVKIT_ROOT" && tar zcf "$DEVKIT_BUNDLE" .)

 pigz => -11

COMPILE_WITH_DEBUG_SYMBOLS

_max
_min
_clamp
make sure all likely functions are being used as intrinsics

check over strictmath stuff

change Random to use a different generator


UseTLAB
ResizeTLAB
AggressiveHeap
AdaptiveSizeThroughPutPolicy
PausePadding 1
PromotedPadding 3
SurvivorPadding 3
MaxGCMinorPauseMillis
BaseFootPrintEstimate (256M)
UseGCOverheadLimit -> critical
GCParallelVerificationEnabled
UseCondCardMark
DisableExplicitGC
MaxHeapSize
OldSize
NewSize
MinTLABSize
ShenandoahTargetNumRegions
ShenandoahGCMode satb vs iu
ShenandoahSATBBufferFlushInterval
ShenandoahOptimizeStaticFinals
JVMCIThreads -> make 0 adaptive
JVMCIHostThreads -> make 0 adaptive
MaxVectorSize
InteriorEntryAlignment
OptoPeepholeAt
OptoPeephole -> should be true?
LoopUnrollLimit
SuperWordLoopUnrollAnalysis -> 64?
UseCountedLoopSafepoints
UseFPUForSpilling -> true
UseCISCSpill -> true?
OptoScheduling
OptoRegScheduling
PartialPeelNewPhiDelta
SuperWordRTDepCheck -> true?
UseCMoveUnconditionally -> may make sense if predictions are going poorly.
OptoBundling
ConditionalMoveLimit
LoopOptsCount -> why is 43 the limit?
HotCallCountThreshold
HotCallProfitThreshold
AutoBoxCacheMax
EscapeAnalysisTimeout -> make it perform a trivial C2 optimization, and then redo it if EA analysis takes too long.
UseOptoBiasInlining -> false with shenandoah?
BailoutToInterpreterForThrows -> eh?
PoisonOSREntry -> eh?
InlineAccessors -> make sure this is actually working right.
SpecialStringEquals -> see what this does.
AliasLevel -> unsure what this does.
TrapBasedRangeChecks
LoopStripMiningIter
ExpandSubTypeCheckAtParseTime
ObjectAlignmentInBytes -> should be 16?
AlwaysSafeConstructors
UseLargePages -> true
UseLargePagesIndividualAllocation -> true
UseLargePagesInMetaspace -> should be true, but have had stability issues
UseNUMA -> make sure it isn't using NUMA if the CPU isn't NUMA-capable
UseNUMAInterleaving -> posssssssibly true? This makes sense in cases where you cannot be smart about NUMA allocation.
LargePageSizeInBytes -> verify it's doing this correctly. Should also verify it understands large vs huge pages.
ForceTimeHighResolution -> make sure this isn't actually slower.
BackgroundCompilation
MethodFlushing -> make sure this doesn't remove methods that aren't actually zombie and re-entrant.
InlineArrayCopy -> 'base library dll'. Thus, I should probably be adding more libraries to the base library DLL if they're necessary?
UseOSErrorReporting
NativeMemoryTracking (slower 5-10%)
ClassUnloading
ClassUnloadingWithConcurrentMark
AllowParallelDefineClass -> do we need to register them as parallel capable?
DontYieldALot
hashCode -> 5 (can we do better?)
FilterSpuriousWakeups -> ignored for windows?
AllowUserSignalHandlers
UseFastJNIAccessors -> validate optimization is happening.
MaxJNILocalCapacity
ContendedPaddingWidth -> make automatic.
UseBiasedLocking -> disable for Shenandoah
BiasedLockingStartupDelay -> why?
CICompileOSR
ReduceNumberOfCompilerThreads
UseLoopSafepoints
CompactStrings
RewriteBytecodes
RewriteFrequentPairs
UseOnStackReplacement
InlineIntrinsics
CodeEntryAlignment
TieredCompilation
SurvivorAlignmentInBytes
PreserveFramePointer
InitArrayShortSize

UseTypeProfile
CSEArrayLength

* Add a float autobox along with the integer one? Maybe a boolean one for true/false?

PrefetchCopyIntervalInBytes
PrefetchScanIntervalInBytes
PrefetchFieldsAhead


MaxVectorSize
MultiArrayExpandLimit
InsertMemBarAfterArraycopy
EliminateAllocationArraySizeLimit
MonomorphicArrayCheck
UseCMoveUnconditionally
PreferInterpreterNativeStubs
ArrayAllocatorMallocLimit
InlineArrayCopy
AllocatePrefetchStepSize -> L1 size 64B
CompilationMode
MaxDirectMemorySize
RequireSharedSpaces
DynamicDumpSharedSpaces
TrustFinalNonStaticFields
SharedArchiveFile -> and all CDS stuff, really. Should be automagic.
UseFastUnorderedTimeStamps
AggressiveHeap
GCPauseIntervalMillis

LIRFillDelaySlots
sizes to calibrate:
InitialBootClassLoaderMetaspaceSize
InitialCodeCacheSize
MetaspaceSize
OptoBlockListSize
CSEArrayLength

NeverActAsServerClassMachine

Default MC JVM arguments:
-Xmx2G # TODO : Make automatic, possibly find a way to ignore the default value. We don't want a limit like this.
-XX:+UnlockExperimentalVMOptions # Default and redundant.
-XX:+UseG1GC # Default and currently redundant.
-XX:G1NewSizePercent=20 # This is _not_ a good default value. Should be like 60 or 70
-XX:G1ReservePercent=20 # This is the default value we use.
-XX:MaxGCPauseMillis=50 # this is a terrible value, currently being overridden in code to '5'.
-XX:G1HeapRegionSize=32M # this is an absolutely terrible value for G1. G1 is very heavily hit by MC.

MaxVectorSize
EliminateAutoBox
AggressiveUnboxing
DoEscapeAnalysis
EscapeAnalysisTimeout
ExitEscapeAnalysisOnTimeout
EliminateAllocations
EliminateAllocationArraySizeLimit
OptimizePtrCompare

InlineReflectionGetCallerClass
          "inline sun.reflect.Reflection.getCallerClass(), known to be "    \
          "part of base library DLL")                                       \

SpecialArraysEquals
SpecialStringEquals
BailoutToInterpreterForThrows
MonomorphicArrayCheck
InlineAccessors
  product(intx, AliasLevel,     3,                                          \
          "0 for no aliasing, 1 for oop/field/static/array split, "         \
          "2 for class split, 3 for unique instances")                      \

set_has_boxed_value(false);

UseTypeSpeculation

// why?
#if defined(IA32) || defined(AMD64)
  if (size > 4*M || LargePageSizeInBytes > 4*M) {
    WARN("JVM cannot use large pages bigger than 4mb.");
    return 0;
  }
#endif

UseNUMAInterleaving # make sure this is being set to false if the system lacks NUMA domains

should_retain_local_variables

ReservedCodeCacheSize
NonProfiledCodeHeapSize
ProfiledCodeHeapSize
NonNMethodCodeHeapSize
InitialCodeCacheSize

NewSizeThreadIncrease
OnStackReplacePercentage

AlwaysSafeConstructors # this has performance benefits but can break very easily.
UnlockExperimentalVMOptions # make sure this is being set uniformly

ForceTimeHighResolution # make sure this is being used
BackgroundCompilation # make sure this is true

TraceLongCompiles # consider using this, and overriding certain methods or even potentially AOTing them
UseInlineCaches # make sure inline caches are sufficiently deep.
CriticalJNINatives # figure out what this does
UseOSErrorReporting # we should really consider using this.
SuppressFatalErrorMessage # This might make sense to keep the game running?
NativeMemoryTracking # figure out what this does
RegisterFinalizersAtInit # ??
ClassUnloading # See if we can do this _explicitly_ only, preferably in STW situations
DynamicallyResizeSystemDictionaries # print when this happens so we can adjust default values
AllowParallelDefineClass # figure out what class loaders are marked as parallel capable
hashCode # again, see if we can implement a better hashing algorithm
UseFastJNIAccessors # validate this is working
